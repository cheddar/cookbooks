"-----------------------------------------------------------------------
" global settings
"-----------------------------------------------------------------------

" personal leader key
let mapleader = ","

" Set GUI window size
if has("gui_running")
    set lines=50
    set columns=150
endif

" use the wildmenu
set wildmenu
set wildmode=full

" reload files changed outside of vim
set autoread

" write on quit
set autowriteall

" no backup files (we have git after all)
set nobackup

" highlight current line
set cursorline

" easy pasting
set pastetoggle=<F4>

" split windows at the bottom by default
set splitbelow


"-----------------------------------------------------------------------
" libraries
"-----------------------------------------------------------------------

NeoBundle 'Shougo/vimproc'
NeoBundle 'vim-scripts/genutils.git'
NeoBundle 'MarcWeber/vim-addon-mw-utils'


"-----------------------------------------------------------------------
" syntax- & filetypes
"-----------------------------------------------------------------------

NeoBundle 'vim-ruby/vim-ruby'
" https://github.com/vim-ruby/vim-ruby/issues/33
let g:ruby_path = ""

NeoBundle 'tpope/vim-rails'
NeoBundle 'heartsentwined/vim-emblem'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'tpope/vim-git'
NeoBundle 'tpope/vim-haml'
NeoBundle 'tpope/vim-markdown'


"-----------------------------------------------------------------------
" colors & ui
"-----------------------------------------------------------------------

NeoBundle 'kien/vim-colors-solarized'
set t_Co=256
set background=dark
colorscheme solarized

NeoBundle 'bling/vim-airline'
let g:airline_powerline_fonts = 1

"NeoBundle 'roman/golden-ratio'
NeoBundle 'hollow/ctrlp.vim'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'

if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

NeoBundle 'Yggdroot/indentLine'


"-----------------------------------------------------------------------
" tools
"-----------------------------------------------------------------------

NeoBundle 'tpope/vim-endwise'
NeoBundle 'vim-scripts/Align'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'vim-scripts/closetag.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-sleuth'
NeoBundle 'tpope/vim-surround.git'

NeoBundle 'tpope/vim-fugitive'
map <leader>ga :silent :Git add %<cr>:redraw!<cr>
map <leader>gb :silent :Gblame<cr>
map <leader>gc :silent :Gcommit<cr>ggi
map <leader>gd :silent :Git diff<cr>:redraw!<cr>
map <leader>gl :silent :Git lg<cr>:redraw!<cr>
map <leader>gp :silent :Git add -p %<cr>:redraw!<cr>
map <leader>gs :silent :Gstatus<cr>

NeoBundle 'AndrewRadev/switch.vim'
nnoremap - :Switch<cr>

NeoBundle 'AndrewRadev/splitjoin.vim'
function! s:try(cmd, default)
  if exists(':' . a:cmd) && !v:count
    let tick = b:changedtick
    exe a:cmd
    if tick == b:changedtick
      execute 'normal! '.a:default
    endif
  else
    execute 'normal! '.v:count.a:default
  endif
endfunction
nnoremap <silent> J :<C-U>call <SID>try('SplitjoinJoin', 'J')<CR>
nnoremap <silent> S :<C-U>call <SID>try('SplitjoinSplit', 'S')<CR>

NeoBundle 'scrooloose/syntastic'
let g:syntastic_auto_jump=1
let g:syntastic_auto_loc_list=1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_mode_map = { 'mode': 'active',
            \ 'active_filetypes': [],
            \ 'passive_filetypes': ['c', 'cpp'] }
let g:syntastic_mri_checkers = ['mri']
let g:syntastic_ruby_exec = '~/.rvm/rubies/default/bin/ruby'

"-----------------------------------------------------------------------
" completion
"-----------------------------------------------------------------------

NeoBundle 'Shougo/neocomplete.vim'
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
"let g:neocomplete#enable_auto_select = 1

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplete#close_popup()
inoremap <expr><C-e> neocomplete#cancel_popup()

" omnicompletion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" all remaining filetypes use syntaxcomplete
autocmd Filetype *
            \ if &omnifunc == "" |
            \   setlocal omnifunc=syntaxcomplete#Complete |
            \ endif


"-----------------------------------------------------------------------
" auto commands
"-----------------------------------------------------------------------

" cd to buffer directory
au BufEnter * execute ":silent! lcd " . expand("%:p:h")

" expand tabs in C
autocmd FileType c,cpp set ts=4 sw=4 tw=79 expandtab et

" remember the git root of the current project
autocmd VimEnter,BufEnter * let b:git_root_dir = system("git rev-parse --show-toplevel 2>/dev/null")[:-2]

" use project-level tagfiles
autocmd VimEnter,BufEnter * execute("set tags=./tags," . b:git_root_dir . "/tags")

" close nerdtree if its the last window
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" delete fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete

" restore cursor without mkview overhead (and bugs)
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    au!
    au BufWinEnter * call ResCur()
augroup END

"-----------------------------------------------------------------------
" custom functions
"-----------------------------------------------------------------------

" shortcut for file rename
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

"-----------------------------------------------------------------------
" key mappings
"-----------------------------------------------------------------------

" function keys
nnoremap <silent> <F1> :help<cr>
nnoremap <silent> <F2> :call RenameFile()<cr>
nnoremap <silent> <F4> :set invpaste<cr>
nnoremap <silent> <F5> :call system("ctags -R --c++-kinds=+p --fields=+iaS --extra=+q -f " . b:git_root_dir . "/tags " . b:git_root_dir)<cr>
call togglebg#map("<F8>")

" window/tab movement
nmap <S-Down>  <C-W><Down>
nmap <S-Up>    <C-W><Up>
nmap <S-Left>  <C-W><Left>
nmap <S-Right> <C-W><Right>

" close with Ctrl-C
nmap <C-c>     <C-W><C-C>
imap <C-c>     <esc><C-W><C-C>

" map Ctrl-N to write+next
imap <C-n> <esc>:w<cr>:n<cr>
map <C-n> :w<cr>:n<cr>

" jump to next merge conflict
map <leader>fc /^<<<<<cr>

" (visual) paste without losing the register
xnoremap P Pgvy

" grep
nmap <silent> <leader>gw :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
command -nargs=+ -complete=file -bar Grep silent! grep! <args>|cwindow|redraw!
nnoremap \ :Grep<SPACE>

" disable search hilight
nmap <silent> <leader>n :silent :nohlsearch<cr>

" cleanup whitespace terror
nmap <silent> <leader>ws :set et<cr>:retab<cr>:%s/\s\+$//g<cr>

" sort helper
vmap <silent> <leader>so :sort<cr>
vmap <silent> <leader>su :sort u<cr>

" add ruby debugger
nnoremap <silent> <leader>rad Orequire 'ruby-debug'; debugger<esc>
