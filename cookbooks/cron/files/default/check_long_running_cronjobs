#!/usr/bin/perl -w

use strict;
use POSIX;

# decide which processes to check depending on ourname: check_long_running_cronjobs checks children of crond,
# check_long_runners_like_<xxx> greps the processlist for xxx
if ($0 =~ /check_long_runners_like_([a-z]*)/ ) {
	open(PS, "ps --no-headers --sort start -o pid,etime,cmd -e | grep \"$1\" |") or die( "open: $!" );
}
else {
	open(PS, "ps --no-headers --sort start -o pid,etime,cmd --ppid `cat /run/crond.pid`|") or die( "open: $!" );
}

my $wrn_secs = 3600*6;
my $crt_secs = 24*3600;

my $warnings = 0;
my $criticals = 0;
my @output = ();

while (<PS>) {
	s/^\s+//; # remove leading wsp
	my @fields = split(/\s+/);
	$fields[1] =~ /(((\d+)-)?(\d{1,2}):)?(\d{2}):(\d{2})/;
	my ($d,$h,$m,$s) = ($3||0, $4||0, $5||0, $6||0);
	my $sec = $s + (60*($m+60*($h+24*$d)));
	#print "pid ".$fields[0]." d=$d,h=$h,m=$m,s=$s = $sec\n";
	if ($sec > $wrn_secs) {
		push @output, "PID ".$fields[0]." is >".floor($sec/3600)."h old (".join(" ",@fields[2..$#fields]).")";
		if ($sec >= $crt_secs) {
			$criticals++;
		}
		else {
			$warnings++;
		}
	}
}

close(PS);

if ($criticals > 0 || $warnings > 0) {
	my $out = join(", ", @output);
	# replace pipes in output because nagios will mistake everything thereafter as "performance data"
	$out =~ s/\|/\\\|/g;
	print $out."\n";
	if ($criticals>0) {
		exit 2;
	} else {
		exit 1;
	}
}

print "OK";
exit 0;
