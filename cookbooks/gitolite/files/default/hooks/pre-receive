#!/usr/bin/ruby -w

def config(key)
  %x(git config --get #{key.to_s} 2>/dev/null).chomp
end

def check_whitespace(rev_old, rev_new, ref)
  return unless config('check.whitespace') == "true"

  check_result = `git diff --check #{rev_old} #{rev_new}`

  unless check_result.strip.empty?
    STDERR.puts
    STDERR.puts "Your commits have been rejected by `git diff --check':"
    STDERR.puts
    STDERR.puts check_result
    STDERR.puts
    return 1
  end

  return 0
end

def check_linear_history(rev_old, rev_new, ref)
  branches = config('enforce.linearhistory').split(',')
  branch = ref.sub('refs/heads/', '')

  return unless branches.include?(branch)

  merges_introduced = `git rev-list --merges #{rev_old}..#{rev_new}`

  unless merges_introduced.strip.empty?
    STDERR.puts
    STDERR.puts "Refusing push to #{ref}, since it would create non-linear"
    STDERR.puts "history by introducing the following merge commits:"
    STDERR.puts merges_introduced
    STDERR.puts
    return 1
  end

  return 0
end

def check_merged_branches(rev_old, rev_new, ref)
  branches = config('check.merged').split(',')
  branch = ref.sub('refs/heads/', '')

  return unless branches.include?(branch)

  pattern = Regexp.new(config('check.mergepattern'))
  merged = %x(git branch --merged #{branch}).split.map(&:chomp).select do |br|
    br =~ pattern
  end

  if merged.any?
    STDERR.puts
    STDERR.puts "Refusing push to #{ref}, since it contains the following merged"
    STDERR.puts "branches which have not been deleted from the remote repository:"
    STDERR.puts
    STDERR.puts merged.map {|b| "  - #{b}" }.join("\n")
    STDERR.puts
    return 1
  end

  return 0
end

STDIN.each_line do |line|
  rev_old, rev_new, ref = line.split(" ")

  [
    check_whitespace(rev_old, rev_new, ref),
    check_linear_history(rev_old, rev_new, ref),
    check_merged_branches(rev_old, rev_new, ref),
  ].compact.max.to_i > 0 and exit(1)
end
