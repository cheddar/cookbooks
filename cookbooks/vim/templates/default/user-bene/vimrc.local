" personal leader key
let mapleader = ","

" Set GUI window size
if has("gui_running")
	set lines=50
	set columns=150
endif

" use the wildmenu
set wildmenu
set wildmode=full

<% if node.platform?("mac_os_x") %>
" use system clipboard
set clipboard=unnamed
<% end %>

" fancy powerline icons
let g:Powerline_symbols = 'fancy'

" ctrlp
let g:ctrlp_max_height = 30

" map Ctrl-N to write+next
imap <C-n> <esc>:w<cr>:n<cr>
map <C-n> :w<cr>:n<cr>

" window movement
map <S-Down> <C-W><Down>
map <S-Up> <C-W><Up>
map <S-Left> <C-W><Left>
map <S-Right> <C-W><Right>

" disable search hilight
map <silent> <leader>n :silent :nohlsearch<cr>

" cleanup whitespace terror
map <silent> <leader>ws :%s/ \+$//g<cr>

" sort helper
vmap <silent> <leader>s :sort<cr>

" git shortcuts
map <leader>gb :Gblame<cr>

" rails shortcuts
map <leader>rc :Rcontroller<cr>
map <leader>rh :Rhelper<cr>
map <leader>rm :Rmodel<cr>
map <leader>rv :Rview<cr>

" ruby shortcuts
nmap <silent> <leader>rf :call RunRspecCurrentFileConque()<CR>
nmap <silent> <leader>rl :call RunRspecCurrentLineConque()<CR>

" use sudo for writing
cmap w!! w !sudo tee % >/dev/null

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" completion
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
highlight Pmenu ctermbg=238 gui=bold

" ruby completion
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" all remaining filetypes use syntaxcomplete
autocmd Filetype *
	\ if &omnifunc == "" |
	\   setlocal omnifunc=syntaxcomplete#Complete |
	\ endif

" shortcut for file rename
function! RenameFile()
	let old_name = expand('%')
	let new_name = input('New file name: ', expand('%'), 'file')
	if new_name != '' && new_name != old_name
		exec ':saveas ' . new_name
		exec ':silent !rm ' . old_name
		redraw!
	endif
endfunction
map <leader>n :call RenameFile()<cr>

" remember the git root of the current project
autocmd VimEnter,BufEnter * let b:git_root_dir=system("git rev-parse --show-toplevel 2>/dev/null")

" nerdtree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
map <F12> :exec "NERDTreeToggle ".b:git_root_dir<cr>
imap <F12> <esc>:exec "NERDTreeToggle ".b:git_root_dir<cr>

" fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete

" git-grep goodies
if !exists('g:git_grep_command')
  let g:git_grep_command = 'git grep -n '
endif

function! s:GitGrep(terms)
  let expr = g:git_grep_command.'"'.a:terms.'"'

  execute ":silent! lcd " . b:git_root_dir
  cgetexpr system(expr)
  execute ":silent! lcd " . expand("%:p:h")

  cwin
  echo 'Number of matches: ' . len(getqflist())
endfunction

function! s:GitGrepWord()
  call s:GitGrep(expand("<cword>"))
endfunction

command! -nargs=0 GitGrepWord :call s:GitGrepWord()
command! -nargs=+ GitGrep     :call s:GitGrep(<q-args>)

nnoremap <silent> <leader>gw :GitGrepWord<CR>

" SelectBuf
let g:selBufAlwaysHideBufNums = 1
nmap <silent> <cr> :SelectBuf<cr>
