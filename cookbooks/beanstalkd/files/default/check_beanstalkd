#!/usr/bin/env python

import sys, beanstalkc, pickle, time
from optparse import OptionParser

parser = OptionParser()

parser.add_option("-S", "--server", dest="servers", action="append")
parser.add_option("-t", "--tube", dest="tube", default="default")
parser.add_option("-w", "--warning", dest="warning", type="int", default=0)
parser.add_option("-c", "--critical", dest="critical", type="int", default=0)
parser.add_option("-W", "--growth-warning", dest="growth_warning", type="float", default=0)
parser.add_option("-C", "--growth-critical", dest="growth_critical", type="float", default=0)

(opts, args) = parser.parse_args()

_id = hash(tuple(opts.servers + [opts.tube]))
jobs_ready_sum = 0
info_msg = []

# retrieve last state
state = {}
try:
  with open('/tmp/.check_beanstalkd') as f:
    state = pickle.load(f)
except:
    pass

# collect current-jobs-ready
for server in opts.servers:
  host, port = server.split(':')
  beanstalk = beanstalkc.Connection(host=host, port=int(port))
  try:
    stats = beanstalk.stats_tube(opts.tube)
    jobs_ready_sum += stats['current-jobs-ready']
    info_msg.append("%s: %d" % (server, stats['current-jobs-ready']))
  except:
    pass

info_msg = ", ".join(info_msg)

# calculate growth
now = time.time()
jobs_ready_growth = 0

if _id in state:
    jobs_ready_new = jobs_ready_sum - state[_id][1]
    jobs_ready_delta = now - state[_id][0]
    jobs_ready_growth = jobs_ready_new/jobs_ready_delta

# update state
state[_id] = (now, jobs_ready_sum)

with open('/tmp/.check_beanstalkd', 'w') as f:
  pickle.dump(state, f)

# status message
msg = "tube %s has %d jobs (%s), growth factor: %f" % (opts.tube,
    jobs_ready_sum, info_msg, jobs_ready_growth)

# check thresholds
status = 0

if opts.warning and jobs_ready_sum > opts.warning:
  status = 1

if opts.growth_warning and jobs_ready_growth > opts.growth_warning:
  status = 1

if opts.critical and jobs_ready_sum > opts.critical:
  status = 2

if opts.growth_critical and jobs_ready_growth > opts.growth_critical:
  status = 2

print msg
sys.exit(status)
